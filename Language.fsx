#load "Lambda.fsx"
let curry f x y = f (x, y)
let (!) (i: int) = uint32 i |> Lambda.I
let (*) = curry Lambda.A
let l t = Lambda.L t
let int = Lambda.Int >> Lambda.Core
let (^) func x = func x
let tru = l^l^ !1
let fls = l^l^ !0
let iif = l^l^l^ !2 * !1 * !0
let not = l^ !0 * fls * tru
let ``and`` = l^l^ !1 * !0 * !1
let ``or`` = l^l^ !1 * !1 * !0
let pair = l^l^l^ !0 * !2 * !1
let fst = l^ !0 * tru
let snd = l^ !0 * fls
let ch0 = l^l^ !0
let ch1 = l^l^ !1 * !0
let ch2 = l^l^ !1 * (!1 * !0)
let ch3 = l^l^ !1 * (!1 * (!1 * !0))
let ch4 = l^l^ !1 * (!1 * (!1 * (!1 * !0)))
let ch5 = l^l^ !1 * (!1 * (!1 * (!1 * (!1 * !0))))
let iszero = l^ !0 * (l^ fls) * tru
let succ = l^l^l^ !1 * (!2 * !1 * !0)
let plus = l^l^l^l^ !3 * !1 * (!2 * !1 * !0)
let mult = l^l^l^ !2 * (!1 * !0)
let pred = l^l^l^ !2 * (l^l^ !0 * (!1 * !3)) * (l^ !1) * (l^ !0)
let y = l^ (l^ !1 * (!0 * !0)) * (l^ !1 * (!0 * !0))
let w = l^ !0 * !0